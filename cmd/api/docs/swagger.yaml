definitions:
  domain.Product:
    properties:
      brand_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      product_category_id:
        type: integer
      product_image:
        type: string
    required:
    - brand_id
    - name
    - product_category_id
    type: object
  domain.ProductBrand:
    properties:
      brand_name:
        type: string
      id:
        type: integer
    type: object
  domain.ProductCategory:
    properties:
      category_name:
        type: string
      id:
        type: integer
    type: object
  request.AdminLoginInfo:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.ApplyCoupon:
    properties:
      coupon_code:
        type: string
    required:
    - coupon_code
    type: object
  request.BlockUser:
    properties:
      reason:
        type: string
      user_id:
        type: integer
    type: object
  request.Coupon:
    properties:
      coupon_name:
        type: string
      description:
        type: string
      discount_max_amount:
        type: number
      discount_percent:
        type: number
      min_order_value:
        type: number
      valid_till:
        description: 'Here''s an example of how you can provide the ValidTill value
          in the Indian time zone: "2023-06-30T23:30:00+05:30"'
        type: string
    type: object
  request.NewAdminInfo:
    properties:
      email:
        description: Email    string `json:"email" validate:"required,email"`
        type: string
      password:
        type: string
      phone:
        maxLength: 10
        minLength: 10
        type: string
      user_name:
        type: string
    required:
    - email
    - password
    - phone
    - user_name
    type: object
  request.NewCategory:
    properties:
      category_name:
        type: string
    type: object
  request.NewProductDetails:
    properties:
      color:
        type: string
      display_size:
        type: string
      graphics_card:
        type: string
      model_no:
        type: string
      os:
        type: string
      price:
        type: number
      processor:
        type: string
      product_id:
        type: integer
      product_item_image:
        type: string
      qty_in_stock:
        type: integer
      ram:
        type: string
      sku:
        type: string
      storage:
        type: string
    required:
    - color
    - display_size
    - model_no
    - os
    - price
    - processor
    - product_id
    - qty_in_stock
    - sku
    - storage
    type: object
  request.NewUserInfo:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        description: |-
          Email    string `json:"email" `
          Phone    string `json:"phone" `
        type: string
      phone:
        maxLength: 10
        minLength: 10
        type: string
    required:
    - email
    - password
    - phone
    type: object
  request.OTPVerify:
    properties:
      otp:
        type: string
      otpid:
        type: string
    required:
    - otp
    - otpid
    type: object
  request.PlaceOrder:
    properties:
      address_id:
        type: integer
      payment_method_id:
        type: integer
    required:
    - address_id
    - payment_method_id
    type: object
  request.ReturnRequest:
    properties:
      order_id:
        type: integer
      resturn_reason:
        type: string
    type: object
  request.UpdateOrderStatuses:
    properties:
      delivery_status_id:
        type: integer
      order_id:
        type: integer
      order_status_id:
        type: integer
    type: object
  request.UserAddressInput:
    properties:
      city:
        type: string
      district:
        type: string
      house_number:
        type: string
      landmark:
        type: string
      pincode:
        type: string
      state:
        type: string
      street:
        type: string
    type: object
  request.UserLoginEmail:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  response.Response:
    properties:
      data: {}
      errors: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
info:
  contact: {}
  description: Ecommerce REST API built using Go, PSQL, REST API following Clean Architecture.
  title: Ecommerce REST API
  version: "1.0"
paths:
  /admin/admins:
    post:
      consumes:
      - application/json
      description: Super admin can create a new admin from admin panel
      operationId: create-admin
      parameters:
      - description: New Admin Details
        in: body
        name: admin_details
        required: true
        schema:
          $ref: '#/definitions/request.NewAdminInfo'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new admin from admin panel
      tags:
      - Admin
  /admin/brands:
    post:
      consumes:
      - application/json
      description: Admins can create new brands from the admin panel
      operationId: create-brand
      parameters:
      - description: New brand name
        in: body
        name: brand_name
        required: true
        schema:
          $ref: '#/definitions/domain.ProductBrand'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can create new product brand
      tags:
      - Product Brand
  /admin/categories:
    get:
      consumes:
      - application/json
      description: Admins can list all categories from the admin panel
      operationId: list-all-categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: List All product category
      tags:
      - Product Category
    post:
      consumes:
      - application/json
      description: Admins can create new categories from the admin panel
      operationId: create-category
      parameters:
      - description: New category name
        in: body
        name: category_name
        required: true
        schema:
          $ref: '#/definitions/request.NewCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create new product category
      tags:
      - Product Category
  /admin/categories/:
    put:
      consumes:
      - application/json
      description: Admins can update categories
      operationId: update-category
      parameters:
      - description: provide the category info to be updated
        in: body
        name: category_details
        required: true
        schema:
          $ref: '#/definitions/domain.ProductCategory'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin  can update the product category details
      tags:
      - Product Category
  /admin/categories/{category_id}:
    delete:
      consumes:
      - application/json
      description: Admins can delete categories
      operationId: delete-category
      parameters:
      - description: Enter the category id
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin  can delete the product category
      tags:
      - Product Category
    get:
      consumes:
      - application/json
      description: Admins can fetch categories by id
      operationId: list-category-by-id
      parameters:
      - description: provide the category id to be fetched
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: List product category by id
      tags:
      - Product Category
  /admin/coupons/add:
    post:
      consumes:
      - application/json
      description: This endpoint allows an admin to add coupon to the database.
      operationId: add-coupon-by-admin
      parameters:
      - description: Coupon Details
        in: body
        name: coupon_details
        required: true
        schema:
          $ref: '#/definitions/request.Coupon'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: API for admin to add the coupon
      tags:
      - Admin Coupon
  /admin/login:
    post:
      consumes:
      - application/json
      description: Admin Login
      operationId: admin-login
      parameters:
      - description: Admin Login Credentials
        in: body
        name: admin_credentials
        required: true
        schema:
          $ref: '#/definitions/request.AdminLoginInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin Login
      tags:
      - Admin
  /admin/logout:
    get:
      consumes:
      - application/json
      description: logout an logged-in admin from the site
      operationId: admin-logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin_Logout
      tags:
      - Admin
  /admin/orders/update:
    patch:
      consumes:
      - application/json
      description: Endpoint for updating order statuses by admin
      operationId: update-order
      parameters:
      - description: Details of the order to be updated
        in: body
        name: order_details
        required: true
        schema:
          $ref: '#/definitions/request.UpdateOrderStatuses'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can update order status of any order using order_id
      tags:
      - Order
  /admin/product-details/:
    post:
      consumes:
      - application/json
      description: This endpoint allows an admin user to add the product details.
      operationId: add-product-details
      parameters:
      - description: Product details
        in: body
        name: product_details
        required: true
        schema:
          $ref: '#/definitions/request.NewProductDetails'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add a product details
      tags:
      - Product Details
  /admin/products:
    get:
      consumes:
      - application/json
      description: Admins and users can list all products
      parameters:
      - description: Number of items to retrieve per page
        in: query
        name: limit
        type: integer
      - description: Enter the page no to display
        in: query
        name: page
        type: integer
      - description: sorting criteria for showing the products
        in: query
        name: sort_by
        type: string
      - description: sorting in descending order
        in: query
        name: sort_desc
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: List All products
      tags:
      - Products
  /admin/products/:
    post:
      consumes:
      - application/json
      description: Admins can create new product listings
      operationId: create-product
      parameters:
      - description: new product details
        in: body
        name: new_product_details
        required: true
        schema:
          $ref: '#/definitions/domain.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can create new product listings
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Admins can update products
      operationId: update-product
      parameters:
      - description: provide the product info to be updated
        in: body
        name: product_details
        required: true
        schema:
          $ref: '#/definitions/domain.Product'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin  can update the product details
      tags:
      - Products
  /admin/products/{product_id}:
    delete:
      consumes:
      - application/json
      description: Admins can delete categories
      operationId: delete-products
      parameters:
      - description: Enter the product id
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin  can delete the products
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Admin and users can Fetch a specific product by product id
      parameters:
      - description: provide the ID of the product to be fetched
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin and users can Fetch a specific product by product id
      tags:
      - Products
  /admin/users:
    get:
      consumes:
      - application/json
      description: The admin can list out all the registered users.
      operationId: list-all-users
      parameters:
      - description: Enter the page no to display
        in: query
        name: page
        type: integer
      - description: Number of items to retrieve per page
        in: query
        name: limit
        type: integer
      - description: sorting criteria for showing the users
        in: query
        name: sort_by
        type: string
      - description: sorting in descending order
        in: query
        name: sort_desc
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can list out all the registered users
      tags:
      - Admin
  /admin/users/:id/block:
    put:
      consumes:
      - application/json
      description: Admin can block a user
      operationId: block-user
      parameters:
      - description: ID of the user to be blocked
        in: body
        name: user_id
        required: true
        schema:
          $ref: '#/definitions/request.BlockUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can block a registered user
      tags:
      - Admin
  /admin/users/{user_id}:
    get:
      consumes:
      - application/json
      description: Admin Fetch a specific user details by user id
      operationId: find-user-by-id
      parameters:
      - description: provide the ID of the user to be fetched
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin Fetch a specific user details by user id
      tags:
      - Admin
  /admin/users/unblock/{user_id}:
    put:
      consumes:
      - application/json
      description: Admin can unblock a blocked user
      operationId: unblock-user
      parameters:
      - description: ID of the user to be unblocked
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can unlock a blocked user
      tags:
      - Admin
  /user/addresses:
    get:
      consumes:
      - application/json
      description: list all address
      operationId: list-address
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can list all the user address
      tags:
      - user
  /user/addresses/:
    post:
      consumes:
      - application/json
      description: Add address
      operationId: add-address
      parameters:
      - description: User address
        in: body
        name: user_address
        required: true
        schema:
          $ref: '#/definitions/request.UserAddressInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can add the user address
      tags:
      - user
  /user/addresses/{address_id}:
    delete:
      consumes:
      - application/json
      description: Delete address
      operationId: delete-address
      parameters:
      - description: address id
        in: path
        name: address_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can delete the user address
      tags:
      - user
  /user/addresses/edit/{address_id}:
    patch:
      consumes:
      - application/json
      description: Update address
      operationId: update-address
      parameters:
      - description: User address
        in: body
        name: user_address
        required: true
        schema:
          $ref: '#/definitions/request.UserAddressInput'
      - description: address id
        in: path
        name: address_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can edit the user address
      tags:
      - user
  /user/cart:
    get:
      consumes:
      - application/json
      description: User can view the cart and total price
      operationId: view-cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can view the items in the cart and there total price
      tags:
      - Cart
  /user/cart/add/{product_details_id}:
    post:
      consumes:
      - application/json
      description: User can add product into the cart
      operationId: add-to-cart
      parameters:
      - description: product_details_id
        in: path
        name: product_details_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can add a productto the cart
      tags:
      - Cart
  /user/cart/applycoupon/:
    patch:
      consumes:
      - application/json
      description: This endpoint allows a user to add coupon to the cart.
      operationId: apply-coupon-to-cart
      parameters:
      - description: Coupon Code
        in: body
        name: coupon_code
        required: true
        schema:
          $ref: '#/definitions/request.ApplyCoupon'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Apply coupon to the cart
      tags:
      - Cart
  /user/cart/placeorder/:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to place the order from cart.
      operationId: place-order-from-cart
      parameters:
      - description: Place Order details
        in: body
        name: place_order_details
        required: true
        schema:
          $ref: '#/definitions/request.PlaceOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: Place the order from cart
      tags:
      - Order
  /user/cart/remove/{product_details_id}:
    delete:
      consumes:
      - application/json
      description: User can remove product from the cart
      operationId: remove-from-cart
      parameters:
      - description: product_details_id
        in: path
        name: product_details_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can remove a product from the cart
      tags:
      - Cart
  /user/home:
    get:
      consumes:
      - application/json
      description: user home
      operationId: user-home
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Home
      tags:
      - user
  /user/login/email:
    post:
      consumes:
      - application/json
      description: user Login
      operationId: user-login
      parameters:
      - description: user Login Credentials
        in: body
        name: user_credentials
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginEmail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Login
      tags:
      - user
  /user/logout:
    get:
      consumes:
      - application/json
      description: logout an logged-in user from the site
      operationId: user-logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User_Logout
      tags:
      - user
  /user/orders/:
    get:
      consumes:
      - application/json
      description: User can can view all the orders he made
      operationId: view-all-orders
      parameters:
      - description: Enter the page no to display
        in: query
        name: page
        type: integer
      - description: Number of items to retrieve per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      summary: Retrieves all orders of the currently logged in user
      tags:
      - Order
  /user/orders/cancel/{order_id}:
    patch:
      consumes:
      - application/json
      description: User can can cancel the order before delivery/out for delivery
      operationId: cancel-order
      parameters:
      - description: orderID of the order to be cancelled
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: user can cancel an undelivered order
      tags:
      - Order
  /user/orders/return/:
    post:
      consumes:
      - application/json
      description: User can request for returning the products within 10 days after
        delivery
      operationId: return-request
      parameters:
      - description: Return request details
        in: body
        name: return_req_details
        required: true
        schema:
          $ref: '#/definitions/request.ReturnRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: user can return a delivered order
      tags:
      - Order
  /user/payments/success/:
    post:
      consumes:
      - application/json
      description: updating payment details upon successful payment
      operationId: payment-success
      parameters:
      - description: provide the razorpay_payment_id
        in: query
        name: razorpay_payment_id
        required: true
        type: string
      - description: provide the razorpay_order_id
        in: query
        name: razorpay_order_id
        required: true
        type: string
      - description: provide the razorpay_signature
        in: query
        name: razorpay_signature
        required: true
        type: string
      - description: provide the order_id
        in: query
        name: order_id
        required: true
        type: string
      - description: provide the order_total
        in: query
        name: order_total
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Handling successful payment
      tags:
      - Payment
  /user/products:
    get:
      consumes:
      - application/json
      description: Admins and users can list all products
      parameters:
      - description: Number of items to retrieve per page
        in: query
        name: limit
        type: integer
      - description: Enter the page no to display
        in: query
        name: page
        type: integer
      - description: sorting criteria for showing the products
        in: query
        name: sort_by
        type: string
      - description: sorting in descending order
        in: query
        name: sort_desc
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: List All products
      tags:
      - Products
  /user/products/{product_id}:
    get:
      consumes:
      - application/json
      description: Admin and users can Fetch a specific product by product id
      parameters:
      - description: provide the ID of the product to be fetched
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin and users can Fetch a specific product by product id
      tags:
      - Products
  /user/signup:
    post:
      consumes:
      - application/json
      description: Create a new user with the specified details.
      operationId: Signup-user
      parameters:
      - description: New user Details
        in: body
        name: user_details
        required: true
        schema:
          $ref: '#/definitions/request.NewUserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for Signup a new user
      tags:
      - Users Signup
  /user/signup/otp/verify:
    post:
      consumes:
      - application/json
      description: verify the otp of a user.
      operationId: Signup-otpverify-user
      parameters:
      - description: OTP verification details
        in: body
        name: otpverify
        required: true
        schema:
          $ref: '#/definitions/request.OTPVerify'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
      summary: signup otp verification
      tags:
      - Users otp verify
swagger: "2.0"
