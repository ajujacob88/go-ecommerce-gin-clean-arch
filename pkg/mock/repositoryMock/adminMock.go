// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/admin.go

// Package repositoryMock is a generated GoMock package.
package repositoryMock

import (
	context "context"
	reflect "reflect"

	domain "github.com/ajujacob88/go-ecommerce-gin-clean-arch/pkg/domain"
	common "github.com/ajujacob88/go-ecommerce-gin-clean-arch/pkg/model/common"
	request "github.com/ajujacob88/go-ecommerce-gin-clean-arch/pkg/model/request"
	response "github.com/ajujacob88/go-ecommerce-gin-clean-arch/pkg/model/response"
	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepository is a mock of AdminRepository interface.
type MockAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryMockRecorder
}

// MockAdminRepositoryMockRecorder is the mock recorder for MockAdminRepository.
type MockAdminRepositoryMockRecorder struct {
	mock *MockAdminRepository
}

// NewMockAdminRepository creates a new mock instance.
func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	mock := &MockAdminRepository{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepository) EXPECT() *MockAdminRepositoryMockRecorder {
	return m.recorder
}

// BlockUser mocks base method.
func (m *MockAdminRepository) BlockUser(ctx context.Context, blockInfo request.BlockUser, adminID int) (domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", ctx, blockInfo, adminID)
	ret0, _ := ret[0].(domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockAdminRepositoryMockRecorder) BlockUser(ctx, blockInfo, adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockAdminRepository)(nil).BlockUser), ctx, blockInfo, adminID)
}

// CreateAdmin mocks base method.
func (m *MockAdminRepository) CreateAdmin(ctx context.Context, newAdminInfo request.NewAdminInfo) (domain.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", ctx, newAdminInfo)
	ret0, _ := ret[0].(domain.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAdminRepositoryMockRecorder) CreateAdmin(ctx, newAdminInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAdminRepository)(nil).CreateAdmin), ctx, newAdminInfo)
}

// FetchFullSalesReport mocks base method.
func (m *MockAdminRepository) FetchFullSalesReport(ctx context.Context, reqReportRange common.SalesReportDateRange) ([]response.SalesReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFullSalesReport", ctx, reqReportRange)
	ret0, _ := ret[0].([]response.SalesReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFullSalesReport indicates an expected call of FetchFullSalesReport.
func (mr *MockAdminRepositoryMockRecorder) FetchFullSalesReport(ctx, reqReportRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFullSalesReport", reflect.TypeOf((*MockAdminRepository)(nil).FetchFullSalesReport), ctx, reqReportRange)
}

// FetchOrdersSummaryData mocks base method.
func (m *MockAdminRepository) FetchOrdersSummaryData(ctx context.Context) (response.AdminDashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrdersSummaryData", ctx)
	ret0, _ := ret[0].(response.AdminDashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrdersSummaryData indicates an expected call of FetchOrdersSummaryData.
func (mr *MockAdminRepositoryMockRecorder) FetchOrdersSummaryData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrdersSummaryData", reflect.TypeOf((*MockAdminRepository)(nil).FetchOrdersSummaryData), ctx)
}

// FetchTotalCreditedAmount mocks base method.
func (m *MockAdminRepository) FetchTotalCreditedAmount(ctx context.Context) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTotalCreditedAmount", ctx)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTotalCreditedAmount indicates an expected call of FetchTotalCreditedAmount.
func (mr *MockAdminRepositoryMockRecorder) FetchTotalCreditedAmount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTotalCreditedAmount", reflect.TypeOf((*MockAdminRepository)(nil).FetchTotalCreditedAmount), ctx)
}

// FetchTotalOrderedItems mocks base method.
func (m *MockAdminRepository) FetchTotalOrderedItems(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTotalOrderedItems", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTotalOrderedItems indicates an expected call of FetchTotalOrderedItems.
func (mr *MockAdminRepositoryMockRecorder) FetchTotalOrderedItems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTotalOrderedItems", reflect.TypeOf((*MockAdminRepository)(nil).FetchTotalOrderedItems), ctx)
}

// FetchUsersCount mocks base method.
func (m *MockAdminRepository) FetchUsersCount(ctx context.Context, adminDashboardData response.AdminDashboard) (response.AdminDashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUsersCount", ctx, adminDashboardData)
	ret0, _ := ret[0].(response.AdminDashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUsersCount indicates an expected call of FetchUsersCount.
func (mr *MockAdminRepositoryMockRecorder) FetchUsersCount(ctx, adminDashboardData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUsersCount", reflect.TypeOf((*MockAdminRepository)(nil).FetchUsersCount), ctx, adminDashboardData)
}

// FindAdmin mocks base method.
func (m *MockAdminRepository) FindAdmin(ctx context.Context, email string) (domain.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAdmin", ctx, email)
	ret0, _ := ret[0].(domain.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAdmin indicates an expected call of FindAdmin.
func (mr *MockAdminRepositoryMockRecorder) FindAdmin(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAdmin", reflect.TypeOf((*MockAdminRepository)(nil).FindAdmin), ctx, email)
}

// FindUserByID mocks base method.
func (m *MockAdminRepository) FindUserByID(ctx context.Context, userID int) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, userID)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockAdminRepositoryMockRecorder) FindUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockAdminRepository)(nil).FindUserByID), ctx, userID)
}

// IsSuperAdmin mocks base method.
func (m *MockAdminRepository) IsSuperAdmin(ctx context.Context, adminID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuperAdmin", ctx, adminID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSuperAdmin indicates an expected call of IsSuperAdmin.
func (mr *MockAdminRepositoryMockRecorder) IsSuperAdmin(ctx, adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuperAdmin", reflect.TypeOf((*MockAdminRepository)(nil).IsSuperAdmin), ctx, adminID)
}

// ListAllUsers mocks base method.
func (m *MockAdminRepository) ListAllUsers(ctx context.Context, queryParams common.QueryParams) ([]domain.Users, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllUsers", ctx, queryParams)
	ret0, _ := ret[0].([]domain.Users)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllUsers indicates an expected call of ListAllUsers.
func (mr *MockAdminRepositoryMockRecorder) ListAllUsers(ctx, queryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllUsers", reflect.TypeOf((*MockAdminRepository)(nil).ListAllUsers), ctx, queryParams)
}

// UnblockUser mocks base method.
func (m *MockAdminRepository) UnblockUser(ctx context.Context, userID int) (domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", ctx, userID)
	ret0, _ := ret[0].(domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockAdminRepositoryMockRecorder) UnblockUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockAdminRepository)(nil).UnblockUser), ctx, userID)
}
