// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/admin.go

// Package usecaseMock is a generated GoMock package.
package usecaseMock

import (
	context "context"
	reflect "reflect"

	domain "github.com/ajujacob88/go-ecommerce-gin-clean-arch/pkg/domain"
	common "github.com/ajujacob88/go-ecommerce-gin-clean-arch/pkg/model/common"
	request "github.com/ajujacob88/go-ecommerce-gin-clean-arch/pkg/model/request"
	response "github.com/ajujacob88/go-ecommerce-gin-clean-arch/pkg/model/response"
	gomock "github.com/golang/mock/gomock"
)

// MockAdminUseCase is a mock of AdminUseCase interface.
type MockAdminUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAdminUseCaseMockRecorder
}

// MockAdminUseCaseMockRecorder is the mock recorder for MockAdminUseCase.
type MockAdminUseCaseMockRecorder struct {
	mock *MockAdminUseCase
}

// NewMockAdminUseCase creates a new mock instance.
func NewMockAdminUseCase(ctrl *gomock.Controller) *MockAdminUseCase {
	mock := &MockAdminUseCase{ctrl: ctrl}
	mock.recorder = &MockAdminUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminUseCase) EXPECT() *MockAdminUseCaseMockRecorder {
	return m.recorder
}

// AdminDashboard mocks base method.
func (m *MockAdminUseCase) AdminDashboard(ctx context.Context) (response.AdminDashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDashboard", ctx)
	ret0, _ := ret[0].(response.AdminDashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDashboard indicates an expected call of AdminDashboard.
func (mr *MockAdminUseCaseMockRecorder) AdminDashboard(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDashboard", reflect.TypeOf((*MockAdminUseCase)(nil).AdminDashboard), ctx)
}

// AdminLogin mocks base method.
func (m *MockAdminUseCase) AdminLogin(ctx context.Context, input request.AdminLoginInfo) (string, response.AdminDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminLogin", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(response.AdminDataOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AdminLogin indicates an expected call of AdminLogin.
func (mr *MockAdminUseCaseMockRecorder) AdminLogin(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminLogin", reflect.TypeOf((*MockAdminUseCase)(nil).AdminLogin), ctx, input)
}

// BlockUser mocks base method.
func (m *MockAdminUseCase) BlockUser(ctx context.Context, blockInfo request.BlockUser, adminID int) (domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", ctx, blockInfo, adminID)
	ret0, _ := ret[0].(domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockAdminUseCaseMockRecorder) BlockUser(ctx, blockInfo, adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockAdminUseCase)(nil).BlockUser), ctx, blockInfo, adminID)
}

// CreateAdmin mocks base method.
func (m *MockAdminUseCase) CreateAdmin(ctx context.Context, newAdmin request.NewAdminInfo, adminID int) (domain.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", ctx, newAdmin, adminID)
	ret0, _ := ret[0].(domain.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAdminUseCaseMockRecorder) CreateAdmin(ctx, newAdmin, adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAdminUseCase)(nil).CreateAdmin), ctx, newAdmin, adminID)
}

// FetchFullSalesReport mocks base method.
func (m *MockAdminUseCase) FetchFullSalesReport(ctx context.Context, reqReportRange common.SalesReportDateRange) ([]response.SalesReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFullSalesReport", ctx, reqReportRange)
	ret0, _ := ret[0].([]response.SalesReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFullSalesReport indicates an expected call of FetchFullSalesReport.
func (mr *MockAdminUseCaseMockRecorder) FetchFullSalesReport(ctx, reqReportRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFullSalesReport", reflect.TypeOf((*MockAdminUseCase)(nil).FetchFullSalesReport), ctx, reqReportRange)
}

// FindUserByID mocks base method.
func (m *MockAdminUseCase) FindUserByID(ctx context.Context, userID int) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, userID)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockAdminUseCaseMockRecorder) FindUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockAdminUseCase)(nil).FindUserByID), ctx, userID)
}

// ListAllUsers mocks base method.
func (m *MockAdminUseCase) ListAllUsers(ctx context.Context, viewUserInfo common.QueryParams) ([]domain.Users, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllUsers", ctx, viewUserInfo)
	ret0, _ := ret[0].([]domain.Users)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllUsers indicates an expected call of ListAllUsers.
func (mr *MockAdminUseCaseMockRecorder) ListAllUsers(ctx, viewUserInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllUsers", reflect.TypeOf((*MockAdminUseCase)(nil).ListAllUsers), ctx, viewUserInfo)
}

// UnblockUser mocks base method.
func (m *MockAdminUseCase) UnblockUser(ctx context.Context, userID int) (domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", ctx, userID)
	ret0, _ := ret[0].(domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockAdminUseCaseMockRecorder) UnblockUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockAdminUseCase)(nil).UnblockUser), ctx, userID)
}
